<!doctype html>
<html lang="en" class="scroll-smooth h-full">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <script>
    (() => {
      const t = localStorage.getItem('theme');
      if (t === 'dark' || (!t && matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      }
    })();
  </script>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.bunny.net">
  <link href="https://fonts.bunny.net/css?family=inter:400,600" rel="stylesheet" />

  <!-- Compiled Tailwind CSS -->
  <link href="/static/css/app.css" rel="stylesheet">

  <title>HealthDash</title>


  <style>
    :root      { --accent: #2563eb; }         /* blue-600 for light mode */
    .dark      { --accent: #f97316; }         /* orange-500 for dark mode */
    ::selection{ background: var(--accent); color: #fff; }
    html { transition: background-color .2s, color .2s; }
  </style>
</head>

<body class="bg-gray-50 text-gray-800 dark:bg-gray-900 dark:text-gray-100 font-sans min-h-screen flex flex-col">

  <!-- Header -->
  <header class="bg-gradient-to-r from-[var(--accent)] to-purple-600 text-white shadow">
    <div class="mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center max-w-5xl">
      <h1 class="text-xl sm:text-2xl font-bold flex items-center gap-2">
        <span class="text-[1.4rem] sm:text-[1.6rem]">ü©∫</span> Health&nbsp;Dashboard
      </h1>
      <button id="themeToggle" class="ml-4 w-9 h-9 rounded-full flex items-center justify-center bg-white/20 hover:bg-white/30 text-white focus:outline-none focus:ring-2 focus:ring-white transition" aria-label="Toggle theme">
        <span class="block dark:hidden">üåô</span>
        <span class="hidden dark:block">‚òÄÔ∏è</span>
      </button>
    </div>
  </header>

  <main class="flex-1 w-full px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
    <div class="max-w-5xl mx-auto space-y-6">
      {{ block "content" . }}{{ end }}
    </div>
  </main>

  <footer class="text-center text-xs text-zinc-500 py-4">
    Built with Go ¬∑ HTMX ¬∑ Tailwind
  </footer>

  <script src="/static/js/htmx.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

  <!-- Custom script: auto-scroll behavior for panels -->
  <script>
    function applyColumnPrefs() {
      const form = document.getElementById('columnForm');
      if (!form) return;
      const allCols = Array.from(form.querySelectorAll('input')).map(i => i.dataset.col);
      const defaultCols = ['netkcal', 'weight'];
      const saved = JSON.parse(localStorage.getItem('pivotColumns') || 'null') || defaultCols;
      form.querySelectorAll('input').forEach(cb => {
        cb.checked = saved.includes(cb.dataset.col);
      });
      allCols.forEach(col => {
        const visible = saved.includes(col);
        document.querySelectorAll('.col-' + col).forEach(el => {
          el.style.display = visible ? '' : 'none';
        });
      });
    }

    document.body.addEventListener('htmx:afterSwap', (e) => {
      if (e.detail.target.id === 'foodList') {
        // After food list updates, scroll it to bottom
        e.detail.target.scrollTop = e.detail.target.scrollHeight;
      }
      if (e.detail.target.id === 'summary') {
        applyColumnPrefs();
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      const summaryEl = document.getElementById('summary');
      if (summaryEl) {
        // On page load, scroll summary panel so current day is visible
        summaryEl.scrollTop = summaryEl.scrollHeight;
      }
      const toggle = document.getElementById('themeToggle');
      if (toggle) {
        toggle.addEventListener('click', () => {
          const root = document.documentElement;
          root.classList.toggle('dark');
          localStorage.setItem('theme', root.classList.contains('dark') ? 'dark' : 'light');
        });
      }
      const form = document.getElementById('columnForm');
      if (form) {
        form.addEventListener('change', () => {
          const selected = Array.from(form.querySelectorAll('input:checked')).map(cb => cb.dataset.col);
          localStorage.setItem('pivotColumns', JSON.stringify(selected));
          applyColumnPrefs();
        });
      }
      applyColumnPrefs();
    });
  </script>
</body>
</html>


{{ define "content" }}
<p style="color:red; font-weight: bold; font-size: 24px; text-align: center;">
  Agent page content is rendering!
</p>

<div class="flex flex-col h-[calc(100vh-150px)]"> <!-- Adjusted height to accommodate fixed input -->
  <h1 class="text-2xl font-bold mb-4 text-center pt-4">Agent Chat</h1>
  <div id="chat" class="flex-grow overflow-y-auto p-4 space-y-2 bg-white dark:bg-zinc-800 rounded-lg shadow mb-20"> <!-- Added mb-20 for spacing above fixed input -->
    <!-- Messages will appear here -->
  </div>

  <form id="message-form" hx-post="/agent/message" hx-trigger="submit" hx-swap="none" class="fixed bottom-0 left-0 right-0 bg-white dark:bg-zinc-900 p-4 border-t dark:border-zinc-700 shadow-md">
    <div class="max-w-5xl mx-auto flex gap-2">
      <input type="text" id="message-input" name="message" placeholder="Type your message..." autocomplete="off" required class="flex-grow p-4 text-lg border rounded-lg focus:ring-2 focus:ring-[var(--accent)] focus:border-transparent outline-none dark:bg-zinc-800 dark:border-zinc-700 dark:text-white" />
      <button type="submit" class="px-8 py-4 bg-[var(--accent)] text-white rounded-lg hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-[var(--accent)] focus:ring-opacity-50 text-lg">Send</button>
      <button type="button" id="new-session" class="px-8 py-4 bg-gray-200 dark:bg-zinc-700 text-zinc-800 dark:text-zinc-200 rounded-lg hover:bg-gray-300 dark:hover:bg-zinc-600 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-zinc-500 text-lg">New</button>
    </div>
  </form>
</div>

<script>
  let sessionId = crypto.randomUUID();

  document.querySelector('#message-form').addEventListener('htmx:configRequest', (e) => {
      e.detail.headers['X-Session-Id'] = sessionId;
  });

  document.querySelector('#message-form').addEventListener('htmx:afterRequest', async (e) => {
      const input = document.querySelector('#message-input');
      const chat = document.querySelector('#chat');

      const userDiv = document.createElement('div');
      userDiv.className = 'user-message p-2 rounded-lg bg-blue-500 text-white self-end max-w-xs sm:max-w-md break-words';
      userDiv.textContent = input.value;
      chat.appendChild(userDiv);

      if (e.detail.xhr.responseText) {
          try {
              const json = JSON.parse(e.detail.xhr.responseText);
              const agentDiv = document.createElement('div');

              if (json.error) {
                  agentDiv.className = 'agent-message p-2 rounded-lg bg-red-500 text-white self-start max-w-xs sm:max-w-md break-words';
                  agentDiv.textContent = 'Error: ' + json.error;
              } else if (json.response) {
                  agentDiv.className = 'agent-message p-2 rounded-lg bg-green-500 text-white self-start max-w-xs sm:max-w-md break-words';
                  agentDiv.textContent = json.response;
              } else {
                  agentDiv.className = 'agent-message p-2 rounded-lg bg-red-500 text-white self-start max-w-xs sm:max-w-md break-words';
                  agentDiv.textContent = 'Error: Unexpected response format';
              }
              chat.appendChild(agentDiv);
          } catch (err) {
              console.error('JSON parse error:', err);
              const errorDiv = document.createElement('div');
              errorDiv.className = 'agent-message p-2 rounded-lg bg-red-500 text-white self-start max-w-xs sm:max-w-md break-words';
              errorDiv.textContent = 'Error: Could not parse response - ' + e.detail.xhr.responseText;
              chat.appendChild(errorDiv);
          }
      } else {
          const errorDiv = document.createElement('div');
          errorDiv.className = 'agent-message p-2 rounded-lg bg-red-500 text-white self-start max-w-xs sm:max-w-md break-words';
          errorDiv.textContent = `Error: ${e.detail.xhr.status} - No response`;
          chat.appendChild(errorDiv);
      }

      input.value = '';
      chat.scrollTop = chat.scrollHeight;
  });

  document.querySelector('#new-session').addEventListener('click', () => {
      sessionId = crypto.randomUUID();
      document.querySelector('#chat').innerHTML = ''; // Clear chat on new session
  });

  // No longer needed as the input form is fixed and chat area has margin-bottom.
  // function adjustChatHeight() {
  //   const form = document.querySelector('#message-form');
  //   const chat = document.querySelector('#chat');
  //   if (form && chat) {
  //     const formHeight = form.offsetHeight;
  //     chat.style.maxHeight = `calc(100vh - ${formHeight}px - 220px)`;
  //   }
  // }

  // window.addEventListener('resize', adjustChatHeight);
  // document.addEventListener('DOMContentLoaded', adjustChatHeight);
  // document.body.addEventListener('htmx:afterSwap', adjustChatHeight);

  // Ensure chat scrolls to the bottom on new messages
  const chatObserver = new MutationObserver((mutationsList, observer) => {
    for(const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        const chat = document.querySelector('#chat');
        chat.scrollTop = chat.scrollHeight;
      }
    }
  });
  const chatElement = document.querySelector('#chat');
  if (chatElement) {
    chatObserver.observe(chatElement, { childList: true });
  }

</script>
{{ end }}


<!-- agent.tmpl -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Agent Chat</title>
  <script src="https://unpkg.com/htmx.org@1.9.10"></script>
  <style>
    body { font-family: sans-serif; max-width: 600px; margin: 2rem auto; }
    #chat { border: 1px solid #ccc; padding: 1rem; height: 400px; overflow-y: auto; display: flex; flex-direction: column; gap: 0.5rem; }
    .user { text-align: right; color: blue; }
    .agent { text-align: left; color: green; }
    form { display: flex; gap: 0.5rem; margin-top: 1rem; }
    input[type="text"] { flex: 1; padding: 0.5rem; }
    button { padding: 0.5rem 1rem; }
  </style>
</head>
<body>
  <h1>Agent Chat</h1>
  <div id="chat"></div>

  <form id="message-form" hx-post="/agent/message" hx-trigger="submit" hx-swap="none">
    <input type="text" id="message-input" name="message" placeholder="Type your message..." autocomplete="off" required />
    <button type="submit">Send</button>
    <button type="button" id="new-session">New Session</button>
  </form>

  <script>
    let sessionId = crypto.randomUUID();

    document.querySelector('#message-form').addEventListener('htmx:configRequest', (e) => {
        // Just set the session ID header - let HTMX handle the form data normally
        e.detail.headers['X-Session-Id'] = sessionId;
    });

    document.querySelector('#message-form').addEventListener('htmx:afterRequest', async (e) => {
        const input = document.querySelector('#message-input');
        const chat = document.querySelector('#chat');
        
        // Add user message
        const userDiv = document.createElement('div');
        userDiv.className = 'user';
        userDiv.textContent = input.value;
        chat.appendChild(userDiv);

        console.log('Response status:', e.detail.xhr.status);
        console.log('Response text:', e.detail.xhr.responseText);

        // Handle response
        if (e.detail.xhr.responseText) {
            try {
                const json = JSON.parse(e.detail.xhr.responseText);
                const agentDiv = document.createElement('div');
                
                if (json.error) {
                    agentDiv.className = 'error';
                    agentDiv.textContent = 'Error: ' + json.error;
                } else if (json.response) {
                    agentDiv.className = 'agent';
                    agentDiv.textContent = json.response;
                } else {
                    agentDiv.className = 'error';
                    agentDiv.textContent = 'Error: Unexpected response format';
                }
                
                chat.appendChild(agentDiv);
            } catch (err) {
                console.error('JSON parse error:', err);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error';
                errorDiv.textContent = 'Error: Could not parse response - ' + e.detail.xhr.responseText;
                chat.appendChild(errorDiv);
            }
        } else {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = `Error: ${e.detail.xhr.status} - No response`;
            chat.appendChild(errorDiv);
        }

        input.value = '';
        chat.scrollTop = chat.scrollHeight;
    });

    document.querySelector('#new-session').addEventListener('click', () => {
        sessionId = crypto.randomUUID();
        document.querySelector('#chat').innerHTML = '';
    });
</script>
</body>
</html>

